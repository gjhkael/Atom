#!/usr/bin/env bash

set -e

# Figure out where ATOM is installed
export ATOM_HOME="$(cd "`dirname "$0"`"/..; pwd)"
COMMONCLASSPATH=$ATOM_HOME/lib/*

. "$ATOM_HOME"/bin/load-atom-env.sh

if [ -z "$1" ]; then
  echo "Usage: atom-class <class> [<args>]" 1>&2
  exit 1
fi

# Find the java binary
if [ -n "${JAVA_HOME}" ]; then
  RUNNER="${JAVA_HOME}/bin/java"
else
  if [ `command -v java` ]; then
    RUNNER="java"
  else
    echo "JAVA_HOME is not set" >&2
    exit 1
  fi
fi

# Find assembly jar
ATOM_ASSEMBLY_JAR=
if [ -f "$ATOM_HOME/RELEASE" ]; then
  ASSEMBLY_DIR="$ATOM_HOME/lib"
else
  #ASSEMBLY_DIR="$ATOM_HOME/assembly/target/core-$ATOM_SCALA_VERSION"
  ASSEMBLY_DIR="$ATOM_HOME/lib"
fi

num_jars="$(ls -1 "$ASSEMBLY_DIR" | grep "^atom-core.*\.jar$" | wc -l)"
if [ "$num_jars" -eq "0" -a -z "$ATOM_ASSEMBLY_JAR" ]; then
  echo "Failed to find Atom assembly in $ASSEMBLY_DIR." 1>&2
  echo "You need to build Atom before running this program." 1>&2
  exit 1
fi
ASSEMBLY_JARS="$(ls -1 "$ASSEMBLY_DIR" | grep "^atom-core.*\.jar$" || true)"
if [ "$num_jars" -gt "1" ]; then
  echo "Found multiple Atom assembly jars in $ASSEMBLY_DIR:" 1>&2
  echo "$ASSEMBLY_JARS" 1>&2
  echo "Please remove all but one jar." 1>&2
  exit 1
fi

ATOM_ASSEMBLY_JAR="${ASSEMBLY_DIR}/${ASSEMBLY_JARS}"

# Verify that versions of java used to build the jars and run Atom are compatible
if [ -n "$JAVA_HOME" ]; then
  JAR_CMD="$JAVA_HOME/bin/jar"
else
  JAR_CMD="jar"
fi

if [ $(command -v "$JAR_CMD") ] ; then
  jar_error_check=$("$JAR_CMD" -tf "$ATOM_ASSEMBLY_JAR" nonexistent/class/path 2>&1)
  if [[ "$jar_error_check" =~ "invalid CEN header" ]]; then
    echo "Loading Atom jar with '$JAR_CMD' failed. " 1>&2
    echo "This is likely because Atom was compiled with Java 7 and run " 1>&2
    echo "with Java 6. (see ATOM-1703). Please use Java 7 to run Atom " 1>&2
    echo "or build Atom with Java 6." 1>&2
    exit 1
  fi
fi

LAUNCH_CLASSPATH="$ATOM_ASSEMBLY_JAR"

# Add the launcher build dir to the classpath if requested.
if [ -n "$ATOM_PREPEND_CLASSES" ]; then
  LAUNCH_CLASSPATH="$ATOM_HOME/launcher/target/scala-$ATOM_SCALA_VERSION/classes:$LAUNCH_CLASSPATH"
fi

export _ATOM_ASSEMBLY="$ATOM_ASSEMBLY_JAR"

# The launcher library will print arguments separated by a NULL character, to allow arguments with
# characters that would be otherwise interpreted by the shell. Read that in a while loop, populating
# an array that will be used to exec the final command.
#CMD=()
#while IFS= read -d '' -r ARG; do
#  CMD+=("$ARG")
#done < <("$RUNNER" -cp "$COMMONCLASSPATH:$LAUNCH_CLASSPATH" "$@")
exec "$RUNNER" -cp "$COMMONCLASSPATH:$LAUNCH_CLASSPATH" "$@"

#if [ "${CMD[0]}" = "usage" ]; then
#  "${CMD[@]}"
#else
#  exec "${CMD[@]}"
#fi

